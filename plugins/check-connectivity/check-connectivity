#!/bin/bash

declare -i connect_timeout=2 transfer_timeout=2 max_redirs=2
declare -i last_check_max_diff=60 has_cache=0 user_def_cache=0
declare -r NAGIOS_SUCCESS=0 NAGIOS_WARNING=1 NAGIOS_CRITICAL=2
cache_file="/var/cache/check-internet/status"

usage() {
  local prog=$(basename $0)
  echo "
Usage: $prog [ OPTIONS ] <-n n_attempts> <url1> [ url2 ] [ url3 ] [ ... ] [ urlN ]

  Options:
    -d               debug
    -n <n_enough>    number of successful attempts to consider internet as UP
    -c <n seconds>   number of seconds to consider as connection timeout
    -T <n seconds>   number of seconds to consider as transfer timeout
    -R <n integer>   max number of acceptable url directs
    -C <file_path>   path of the cache file
"
  exit 1
}

error() {
  local msg="$1"
  local ret=${2:-1}

  echo "Error: $msg" 1>&2
  exit $ret
}

is_number() {
  local n="$1"

  if [[ $n =~ ^[0-9]+$ ]]; then
    return 0
  else
    return 1
  fi
}

warn() {
  msg="$1"
  
  echo "warning: $msg" 1>&2
}

# main

unset n_enough
getopt_flags='n:c:T:R:C:d'
while getopts $getopt_flags OPTNAME; do
  case $OPTNAME in
    n)
      if is_number $OPTARG; then
        n_enough=$OPTARG
      else
        error "argument to -n must be numeric"
      fi
      ;;
    c)
      if is_number $OPTARG; then
        connect_timeout=$OPTARG
      else
        error "argument to -c must be numeric"
      fi
      ;;
    T)
      if is_number $OPTARG; then
        transfer_timeout=$OPTARG
      else
        error "argument to -T must be numeric"
      fi
      ;;
    R)
      if is_number $OPTARG; then
        max_redirs=$OPTARG
      else
        error "argument to -R must be numeric"
      fi
      ;;
    d)
      set -x
      ;;
    C)
      cache_file="$OPTARG"
      user_def_cache=1
      ;;
    *)
      exit 1
      ;;
  esac
done

[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

[ $# -eq 0 ] && usage

if ! hash curl ; then
  error "unable to find curl executable"
fi

if [ -z "$n_enough" ]; then
  error "missing command line option -n"
elif [ $n_enough -gt $# ]; then
  error "the number of successful attempts can't be greater than the "\
"number of urls"
fi

if [ -e "$cache_file" -a -s "$cache_file" ]; then
  status_line=$(head -1 "$cache_file")
  if [ $? -ne 0 ]; then
    warn "unable to read from cache file"
    
  elif ! [[ $status_line =~ ^[0-9]:[0-9]+$ ]]; then
    warn "data from cache file is not in the desired format (exit_code:epoch)"
  else
    last_status=${status_line%%:*}
    last_check_time=${status_line##*:}

    now=$(date +%s)
    if [ $(( $now - $last_check_time )) -le $last_check_max_diff ]; then
      exit $last_status
    fi
    has_cache=1
  fi
elif [ $user_def_cache -gt 0 ]; then
  warn "unable to use cache_file '$cache_file'"
fi

declare -i n_attempts=0 n_success=0
while [ $n_success -lt $n_enough -a -n "$1" ]; do
  test_url="$1"
  curl --connect-timeout $connect_timeout --max-time $transfer_timeout \
    -L --max-redirs $max_redirs --retry 0 -o /dev/null -s "$test_url"
  status=$?
  n_attempts+=1
  if [ $status -eq 0 ]; then
    n_success+=1
    [ $n_success -eq $n_enough ] && break
  elif [ $(( $# - 1 + $n_success )) -lt $n_enough ]; then
    # too many failures
    # even if upcoming tests succeed, it won't reach $n_enough
    break
  fi

  shift
done

if [ $n_success -ge $n_enough ]; then
  exit_code=$NAGIOS_SUCCESS
else
  exit_code=$NAGIOS_CRITICAL
fi

if [ $has_cache -gt 0 ]; then
  now=$(date +%s)
  echo "$exit_code:$now" >"$cache_file"
  [ $? -ne 0 ] && echo "warning: unable to write to cache file"
fi

exit $exit_code
