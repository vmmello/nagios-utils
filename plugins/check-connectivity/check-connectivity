#!/bin/bash

declare -i connect_timeout=2 transfer_timeout=2 max_redirs=2
declare -i cache_time=60
declare -r NAGIOS_SUCCESS=0 NAGIOS_WARNING=1 NAGIOS_CRITICAL=2 NAGIOS_UNKNOWN=3
declare -a accepted_opt_names=( connect_timeout transfer_timeout max_redirs cache_time curl_opts net_if )
declare -a received_options

cache_dir="/var/cache/check-connectivity"
tag_name="connectivity"

usage() {
  local prog=$(basename $0)
  echo "
Usage: $prog <-4 | -6> [ OPTIONS ] <-c n_critical> <-w n_warning> <url1> [ url2 ] [ ... ] [ urlN ]

  Options:
    -4               check IPv4 connectivity
    -6               check IPv6 connectivity
    -D <cache_dir>   directory where to cache connectivity information
    -T <tag_name>    name to use as the cache file
    -N               disable cache (don't cache the result)
    -d               enable debug mode
    -v               verbose mode. Print step information
    -O name=value    set the given option name to the specified value
                     Accepted names:
                         connect_timeout (is)
                         transfer_timeout (is)
                         max_redirs (i)
                         cache_time (is)
                         curl_opts (S)
                         net_if (S)
                     Expected value format:
                         (is = integer seconds, i = integer, S = string)
"
  exit 1
}

error() {
  local msg="$1"
  local ret=${2:-$NAGIOS_UNKNOWN}

  echo "Error: $msg" 1>&2
  exit $ret
}

is_number() {
  local n="$1"

  if [[ $n =~ ^[0-9]+$ ]]; then
    return 0
  else
    return 1
  fi
}

is_in_array() {
  local value="$1"
  shift
  local v

  for v in "$@"; do
    if [ "$v" == "$value" ]; then
      return 0
    fi
  done

  return 1
}

warn() {
  msg="$1"
  
  echo "Warning: $msg" 1>&2
}

state_str() {
  local code="$1"
  local output=""

  if [ $code -eq $NAGIOS_SUCCESS ]; then
    output+='OK'
  elif [ $code -eq $NAGIOS_WARNING ]; then
    output+='WARNING'
  elif [ $code -eq $NAGIOS_CRITICAL ]; then
    output+='CRITICAL'
  elif [ $code -eq $NAGIOS_UNKNOWN ]; then
    output+='UNKNOWN'
  else
    output=""
    return 1
  fi

  echo -n "$output"

  return 0
}

status_line() {
  local code="$1"
  local n_ok="$2"
  local n_failed="$3"

  local line="" status=""

  line="`state_str $code` -"
  if [ $n_ok -gt 0 ]; then
    line+=" $n_ok successful repl"
    if [ $n_ok -gt 1 ]; then
      line+="ies"
    else
      line+="y"
    fi
  fi

  if [ $n_failed -gt 0 ]; then
    line+=" $n_failed failed request"
    if [ $n_failed -gt 1 ]; then
      line+="s"
    fi
  fi

  echo "$line"
}

verbose_line() {
  local msg="$1"

  [ -z "$verbose" ] && return 0

  echo -e "$msg"
}

# main

unset n_failed n_critical user_def_tag use_cache disable_cache curl_opts net_if
unset verbose

getopt_flags='46dc:D:w:O:Nv'
proto=''
while getopts $getopt_flags OPTNAME; do
  case $OPTNAME in
    [46])
      if [ -n "$proto" -a "-$proto" != "-$OPTNAME" ]; then
        error "either -4 or -6 should be used, not both"
      else
        proto="-$OPTNAME"
      fi
      ;;
    c)
      if is_number $OPTARG; then
        n_critical=$OPTARG
      else
        error "argument to -c must be an integer >= 0"
      fi
      ;;
    w)
      if is_number $OPTARG; then
        n_warning=$OPTARG
      else
        error "argument to -w must be an integer >= 0"
      fi
      ;;
    d)
      set -x
      ;;
    D)
      cache_dir="$OPTARG"
      ;;
    T)
      tag_name="$OPTARG"
      user_def_tag=1
      ;;
    N)
      disable_cache=1
      ;;
    O)
      prev_char=""
      name_value=""
      declare -i n_pos=0
      while [ $n_pos -lt ${#OPTARG} ]; do
        char=${OPTARG:$n_pos:1}
        n_pos+=1
        if [ "$char" == "," ] && [ -z "$name_value" -o -z "$prev_char" ]; then
          continue
        elif [ "$char" == "," -a "$prev_char" != "\\" -a "$prev_char" != "," ]; then
          received_options+=( "$name_value" )
          name_value=""
          prev_char=""
        elif [ "$char" == "," -a "$prev_char" == "\\" ]; then
          name_value="${name_value:0:$(( $n_pos - 1 ))},"
          prev_char="$char"
        else
          name_value+="$char"
          prev_char="$char"
        fi
      done
      [ -n "$name_value" ] && received_options+=("$name_value")

      for name_value in "${received_options[@]}"; do
        if ! [[ "$name_value" =~ ^([A-Za-z0-9_]+)=(.+) ]]; then
          error "option specified in an invalid format: '$name_value'"
        fi

        opt_name=${name_value%%=*}
        opt_value=${name_value#*=}

        if is_in_array "$opt_name" ${accepted_opt_names[@]}; then
          eval "$opt_name"=`printf '%q' "$opt_value"`
        else
          error "unknown option name '$opt_name'"
        fi
      done
      ;;
    v)
      verbose=1
      ;;
    *)
      exit $NAGIOS_UNKNOWN
      ;;
  esac
done

[ $OPTIND -gt 1 ] && shift $(( $OPTIND - 1 ))

[ $# -eq 0 ] && usage

if ! hash curl &>/dev/null ; then
  error "unable to find the curl executable. This script depends on "\
"curl being installed and on the PATH"
fi

if [ -z "$n_critical" ]; then
  error "missing command line option -c"
elif [ $n_critical -gt $# ]; then
  error "the number of failed attempts can't be greater than the "\
"number of urls"
elif [ -z "$n_warning" ]; then
  error "missing command line option -w"
elif [ $n_warning -gt $# ]; then
  error "the number of warning attempts can't be greater than the "\
"number of urls"
elif [ $n_critical -eq $n_warning ]; then
  error "the warning (-w) and critical (-c) values can't be equal"
fi

if [ -z "$proto" ]; then
  error "you need to specify either -4 (for ipv4) or -6 (for ipv6)"
fi

if [ -z "$user_def_tag" -a "$proto" == "-4" ]; then
  tag_name+="_ipv4"
elif [ -z "$user_def_tag" -a "$proto" == "-6" ]; then
  tag_name+="_ipv6"
fi

cache_file="$cache_dir/$tag_name"

# cache is enabled, cache_dir exists and is writable and
# cache file is a link or not exists
if [ -z "$disable_cache" -a -d "$cache_dir" -a -w "$cache_dir" ] && [ -L "$cache_file" -o ! -e "$cache_file" ]; then
  verbose_line "Using cache file '$cache_file'"
  use_cache=1
elif [ -z "$disable_cache" -a ! -e "$cache_dir" ]; then
  mkdir "$cache_dir"
  if [ $? -ne 0 ]; then
    warn "unable to create cache_dir '$cache_dir'. Skipping caching..."
  else
    verbose_line "Created cache directory '$cache_dir'"
  fi
elif [ -z "$disable_cache" -a ! -d "$cache_dir" ]; then
  warn "cache_dir path '$cache_dir' exists but is not a directory. Skipping caching..."
elif [ -z "$disable_cache" -a -e "$cache_file" -a ! -L "$cache_file" ]; then
  warn "cache_file path '$cache_file' exists but is not a symlink. Skipping caching..."
fi

if [ -n "$use_cache" -a -L "$cache_file" ]; then
  status_str=$(readlink "$cache_file")
  if [ $? -ne 0 ]; then
    warn "unable to read from cache file"
  elif ! [[ "$status_str" =~ ^[0123]:[0-9]+$ ]]; then
    warn "data from cache file is not in the desired format (exit_code:epoch)"
  else
    verbose_line "Got status line from cache: $status_str"
    # the cache string is the contents of the link de-referenced
    # it should be in the format: exit_code:epoch, e.g.: 0:1372741914
    last_status=${status_str%%:*}
    last_check_time=${status_str##*:}

    verbose_line "Status from cache: $last_status, last_check_time = $last_check_time"
    now=$(date +%s)
    if [ $? -ne 0 ]; then
      error "unable to determine current time"
    fi

    if [ $(( $now - $last_check_time )) -le $cache_time ]; then
      verbose_line "Cache contents is fresh, using it\n"
      status=`state_str "$last_status"`
      if [ $? -eq 0 ]; then
        echo "$status - got from cache, last tested at `date -d @$last_check_time`"
      fi

      exit $last_status
    else
      verbose_line "Cache contents it not fresh, re-testing all URLs\n"
    fi
  fi
fi

declare -i n_ok=0 n_failed=0 n_total=$# n_left=$#
while [ $n_left -gt 0 -a -n "$1" ]; do
  n_left=$(( $n_left - 1 ))
  test_url="$1"

  verbose_line "Testing URL '$test_url'"

  curl $proto --connect-timeout $connect_timeout --max-time $transfer_timeout \
    ${curl_opts:+$curl_opts} ${net_if:+--interface "$net_if"} -L \
    --max-redirs $max_redirs --retry 0 -o /dev/null -s "$test_url"
  status=$?
  if [ $status -eq 0 ]; then
    verbose_line "Successfully got a response from '$test_url'\n"
    n_ok+=1
  else
    verbose_line "Failed request on $test_url\n"
    n_failed+=1
  fi

  if [ $status -eq 0 -a $(( $n_left + $n_failed )) -lt $n_critical  ]; then
    # even if next tests fail, it won't reach $n_critical
    # so no need to test anymore
    verbose_line "Received $n_ok successful responses, ending test\n"
    break
  elif [ $status -ne 0 -a $n_failed -eq $n_critical ]; then
    verbose_line "Received $n_failed failed responses, ending test\n"
    # too many failures, don't need to test anymore
    break
  fi

  shift
done

if [ $n_critical -gt 0 -a $n_failed -eq $n_critical ]; then
  exit_code=$NAGIOS_CRITICAL
elif [ $n_warning -gt 0 -a $n_failed -ge $n_warning ]; then
  exit_code=$NAGIOS_WARNING
else
  exit_code=$NAGIOS_SUCCESS
fi

if [ -n "$use_cache" ]; then
  now=$(date +%s)
  if [ $? -ne 0 ]; then
    error "unable to determine current time"
  fi

  if [ -n "$use_cache" ] && ! ln -sf "$exit_code:$now" "$cache_file"; then
    warn "unable to link to cache file '$cache_file'"
  fi
fi

status_line $exit_code $n_ok $n_failed

exit $exit_code
