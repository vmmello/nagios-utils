#!/bin/bash
declare -r NAGIOS_OK=0 NAGIOS_WARNING=1 NAGIOS_CRITICAL=2 NAGIOS_UNKNOWN=3
declare -r CURL_CONN_ERR=7 CURL_NET_SEND_ERR=55 CURL_NET_RECV_ERR=56 
declare -r CURL_READ_ERR=26 CURL_OP_TIMEOUT=28 CURL_NS_ERR=6
declare -r CURL_SSL_HSHK_ERR=35 CURL_MANY_REDIRS_ERR=47
declare -r CURL_SSL_PEER_CERT_ERR=51

usage() {
  echo "Usage: `basename "$0"` [ options ] <url>

  Options:
    -O metric=value             set the specified max ref value
                                for each specified metric
    
  Allowed metric names:
    ns_time
    conn_time
    header_time
    first_byte
    total_time


  This plugin does an HTTP request and checks the measured times for the
  main HTTP metrics: nslookup time, connection time, header time, first byte
  time and total transfer time. It returns error CRITICAL when any of the
  measures is higher than the value specified. Otherwise it returns OK.

  It outputs the performance metrics in the expected nagios format for
  performance data. If no metric is specified, it'll only ouput the
  values for all metrics, but do no comparison.

  The times values are in seconds.

  Example usage:
  \$ `basename "$0"` \
-O ns_time=0.7,conn_time=1,header_time=2,first_byte=2.5,total_time=3.5 \
www.domain.com
"

  exit 1
}

error() {
  local msg="$1"
  local ret=${2:-$NAGIOS_UNKNOWN}

  echo "Error: $msg" 1>&2
  exit $ret
}

is_in_array() {
  local value="$1"
  shift
  local v

  for v in "$@"; do
    if [ "$v" == "$value" ]; then
      return 0
    fi
  done

  return 1
}

is_greater() {
  local exp="$1"
  local recv="$2"
  local result

  echo "$recv > $exp" > ${bc[1]}
  read -u ${bc[0]} result

  if [ "$result" == 1 ]; then
    return 0
  else
    return 1
  fi
}

bc_compare() {
  local op="$1"
  local exp="$2"
  local recv="$3"
  local math_op
  local result


  if [ "$op" == "is_greater" ]; then
    math_op='>'
  elif [ "$op" == "is_lower" ]; then
    math_op='<'
  fi

  echo "$recv $math_op $exp" >&${bc[1]}
  read -u ${bc[0]} result

  if [ "$result" == 1 ]; then
    return 0
  else
    return 1
  fi
}

[ $# -eq 0 -o -z "$1" ] && usage

accepted_opt_names=( 'ns_time' 'conn_time' 'first_byte' 'header_time' \
                     'total_time' )

getopt_flags='O:'
while getopts $getopt_flags OPTN; do
  case $OPTN in
    O)
      prev_char=""
      name_value=""
      declare -i n_pos=0
      while [ $n_pos -lt ${#OPTARG} ]; do
        char=${OPTARG:$n_pos:1}
        n_pos+=1
        if [ "$char" == "," ] && [ -z "$name_value" -o -z "$prev_char" ]; then
          continue
        elif [ "$char" == "," -a "$prev_char" != "\\" -a "$prev_char" != "," ]; then
          received_options+=( "$name_value" )
          name_value=""
          prev_char=""
        elif [ "$char" == "," -a "$prev_char" == "\\" ]; then
          name_value="${name_value:0:$(( $n_pos - 1 ))},"
          prev_char="$char"
        else
          name_value+="$char"
          prev_char="$char"
        fi
      done
      [ -n "$name_value" ] && received_options+=("$name_value")

      for name_value in "${received_options[@]}"; do
        if ! [[ "$name_value" =~ ^([A-Za-z0-9_]+)=(.+) ]]; then
          error "option specified in an invalid format: '$name_value'"
        fi

        opt_name=${name_value%%=*}
        opt_value=${name_value#*=}

        if is_in_array "$opt_name" ${accepted_opt_names[@]}; then
          eval "e_$opt_name"=`printf '%q' "$opt_value"`
        else
          error "unknown option name '$opt_name'"
        fi
      done
      ;;
    *)
      exit $NAGIOS_UNKNOWN
      ;;
  esac
done
shift $(( $OPTIND - 1 ))

[ $# -eq 0 -o -z "$1" ] && usage

url="$1"

unset curl_err_str
curl_st_str=$( curl -s -o /dev/null -m 10 \
  -w '%{http_code}|%{size_download}|%{time_namelookup}|%{time_connect}|'\
'%{time_pretransfer}|%{time_starttransfer}|%{time_total}|%{remote_ip}' \
  "$url" )

curl_status=$?

IFS="|" \
  read http_code rsp_size ns_time conn_time header_time \
        first_byte total_time remote_ip <<< "$curl_st_str"


if [ $curl_status -eq 0 ]; then
  status=$NAGIOS_OK
elif [ $curl_status -eq $CURL_CONN_ERR ]; then
  curl_err_str="Unable to connect to host ($remote_ip)"
elif [ $curl_status -eq $CURL_NS_ERR ]; then
  curl_err_str="Unable to resolve host address"
elif [ $curl_status -eq $CURL_OP_TIMEOUT ]; then
  curl_err_str="Connection timed out ($remote_ip)"
elif [ $curl_status -eq $CURL_READ_ERR ]; then
  curl_err_str="Read error"
elif [ $curl_status -eq $CURL_NET_RECV_ERR ]; then
  curl_err_str="Network recv error"
elif [ $curl_status -eq $CURL_NET_SEND_ERR ]; then
  curl_err_str="Network send error"
elif [ $curl_status -eq $CURL_SSL_HSHK_ERR ]; then
  curl_err_str="SSL Handshake failed"
elif [ $curl_status -eq $CURL_MANY_REDIRS_ERR ]; then
  curl_err_str="Too many redirects"
elif [ $curl_status -eq $CURL_SSL_PEER_CERT_ERR ]; then
  curl_err_str="Unable to validate peer SSL certificate"
else
  curl_err_str="curl returned error code $curl_status"
fi

if [ -n "$curl_err_str" ]; then
  echo "CRITICAL - $curl_err_str"
  exit $NAGIOS_CRITICAL
fi

output_str="$url ($remote_ip)"

coproc bc { bc -l; }

if [ -n "$e_ns_time" ]; then
  if bc_compare is_greater "$e_ns_time" "$ns_time"; then
    status=$NAGIOS_CRITICAL
    output_str+=", nslookup time is high"
    ns_time_p=1
  fi
fi

if [ -n "$e_conn_time" ]; then
  if [ -z "$ns_time_p" ]; then
    if bc_compare is_greater "$e_conn_time" "$conn_time"; then
      status=$NAGIOS_CRITICAL
      output_str+=", connection time is high"
      conn_time_p=1
    fi
  fi
fi

if [ -n "$e_header_time" ]; then
  if [ -z "$conn_time_p" ]; then
    if bc_compare is_greater "$e_header_time" "$header_time"; then
      status=$NAGIOS_CRITICAL
      header_time_p=1
      output_str+=", header time is high"
    fi
  fi
fi

if [ -n "$e_first_byte" ]; then
  if [ -z "$header_time_p" ]; then
    if bc_compare is_greater "$e_first_byte" "$first_byte"; then
      status=$NAGIOS_CRITICAL
      output_str+=", first byte time is high"
      first_byte_p=1
    fi
  fi
fi


if [ -n "$e_total_time" ]; then
  if [ -z "$first_byte_p" ]; then
    if bc_compare is_greater "$e_total_time" "$total_time"; then
      status=$NAGIOS_CRITICAL
      output_str+=", transfer time is high"
      total_time_p=1
    fi
  fi
fi

perfdata_str=$(printf 'http_code: %d, size: %d bytes, ' \
  "$http_code" "$rsp_size")
perfdata_str+=$(printf 'nslookup time: %s s, connect time: %s s, ' \
  "$ns_time" "$conn_time")
perfdata_str+=$(printf 'header time: %s s, first byte time: %s s, ' \
  "$header_time" "$first_byte")
perfdata_str+=$(printf 'total time: %s s' "$total_time")

if [ $status -eq $NAGIOS_OK ]; then
  status_str="OK"
else
  status_str="CRITICAL"
fi

echo "$status_str - $output_str | $perfdata_str"

exit $status
